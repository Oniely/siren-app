import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, TouchableOpacity, Alert, Image } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { Audio } from 'expo-av';
import { ref as storageRef, uploadBytes, getDownloadURL } from 'firebase/storage';
import { ref, get, query, orderByChild, equalTo, update, onValue, remove } from 'firebase/database';
import { db, auth, storage } from '@/firebaseConfig';
import { useLocalSearchParams } from 'expo-router';
import { getAuth } from 'firebase/auth';
import { useRouter } from 'expo-router'; // Import useRouter from expo-router
import { widthPercentageToDP as wp, heightPercentageToDP as hp } from 'react-native-responsive-screen';
import FontAwesome from '@expo/vector-icons/FontAwesome';

const TestRecordingScreen = () => {
  const router = useRouter();
  const [recording, setRecording] = useState<Audio.Recording | null>(null);
  const [isRecording, setIsRecording] = useState(false);
  const [recordingUri, setRecordingUri] = useState<string | null>(null);
  const [callDetails, setCallDetails] = useState<any>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [sound, setSound] = useState<Audio.Sound | null>(null);
  const [callRoomId, setCallRoomId] = useState<string>(
    'room_1733945490711_VVqOS5w4dsZ8Tv12B8MVbylUNla2_cBH3Ux7ANIcxFPNGm2c2Z3lmlk53'
  );
  const [isReceiverRecordingPlayed, setIsReceiverRecordingPlayed] = useState(false); // New flag
  const [intervalId, setIntervalId] = useState<NodeJS.Timeout | null>(null); // For storing interval ID
  const params = useLocalSearchParams();
  const receiverName = params.name;
  const callerId = getAuth().currentUser?.uid;
  useEffect(() => {
    if (!callerId) return;

    const callRef = ref(db, 'calls');
    const unsubscribe = onValue(callRef, (snapshot) => {
      
      if (!snapshot.exists()) {
        Alert.alert('Call Ended', 'The call room has been closed or does not exist.', [
          {
            text: 'OK',
            onPress: () => {
              const currentCallRef = ref(db, `calls/${callRoomId}`);
              remove(currentCallRef)
                .then(() => {
                  router.back();
                })
                .catch((error) => {
                  console.error('Error updating call status:', error);
                  router.back();
                });
            },
          },
        ]);
        return;
      }

      const calls = snapshot.val();
      let roomFound = false;

      Object.entries(calls).forEach(async ([roomId, callData]: any) => {
        if (callData.caller.id === callerId) {
          roomFound = true;
          const receiverRecordingUri = callData.receiver?.recordingUri;
          if (
            receiverRecordingUri &&
            receiverRecordingUri.startsWith('https://') &&
            !isReceiverRecordingPlayed
          ) {
            setCallRoomId(roomId);
            setCallDetails(callData);
            await playReceiverRecording(receiverRecordingUri);
            setIsReceiverRecordingPlayed(true);
          }
        }
      });

      // If no matching room is found for the caller
      if (!roomFound) {
        Alert.alert('Call Ended', 'The call room has been closed or does not exist.', [
          {
            text: 'OK',
            onPress: () => {
              // Update the call status in the database before routing back
              const currentCallRef = ref(db, `calls/${callRoomId}`);

              remove(currentCallRef)
                .then(() => {
                  router.back(); // Navigate back for both caller and receiver
                })
                .catch((error) => {
                  console.error('Error updating call status:', error);
                  router.back(); // Ensure navigation back even if update fails
                });
            },
          },
        ]);
      }
    });

    return () => unsubscribe();
  }, [callerId]); // Keep current dependency

  const playReceiverRecording = async (uri: string) => {
    try {
      if (uri) {
        const { sound } = await Audio.Sound.createAsync({ uri });
        setSound(sound);
        await sound.playAsync();
        setIsPlaying(true);

        sound.setOnPlaybackStatusUpdate((status: any) => {
          if (status.isLoaded && status.didJustFinish) {
            setIsPlaying(false);
          }
        });
      } else {
        Alert.alert('No recording found', 'Receiver has not uploaded any recording.');
      }
    } catch (error) {
      console.error('Error playing receiver recording:', error);
      Alert.alert('Error', "Couldn't play receiver's recording.");
    }
  };

  const startRecording = async () => {
    try {
      const permission = await Audio.requestPermissionsAsync();
      if (!permission.granted) {
        Alert.alert('Permission Denied', 'You need to allow microphone access to record audio.');
        return;
      }

      await Audio.setAudioModeAsync({
        allowsRecordingIOS: true,
        playsInSilentModeIOS: true,
      });

      const { recording } = await Audio.Recording.createAsync(Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY);
      setRecording(recording);
      setIsRecording(true);
      Alert.alert('Recording started.');
    } catch (error) {
      console.error('Error starting recording:', error);
      Alert.alert('Error', 'Could not start recording. Please try again.');
    }
  };

  // Function to stop recording
  const stopRecording = async () => {
    try {
      if (recording) {
        await recording.stopAndUnloadAsync();
        const uri = recording.getURI();
        setRecordingUri(uri);
        setRecording(null);
        setIsRecording(false);
        setIsPlaying(false);

        if (uri) {
          const downloadURL = await uploadRecordingToStorage(uri);

          if (downloadURL) {
            await insertRecordingToCallRoom(downloadURL);
            setIsRecording(false);
            setIsPlaying(false);
          }
        }
      }
    } catch (error) {
      console.error('Error stopping recording:', error);
      Alert.alert('Error', 'Could not stop recording. Please try again.');
    }
  };

  // Function to upload recording to Firebase Storage
  const uploadRecordingToStorage = async (localUri: string) => {
    try {
      const response = await fetch(localUri);
      const blob = await response.blob();
      const storageReference = storageRef(storage, `recordings/${auth.currentUser?.uid}/${Date.now()}.3gp`);

      if (!blob) {
        throw new Error('Failed to create blob from recording');
      }

      const uploadResult = await uploadBytes(storageReference, blob);
      const downloadURL = await getDownloadURL(uploadResult.ref);

      return downloadURL;
    } catch (error) {
      console.error('Error uploading recording:', error);
      Alert.alert('Upload Error', 'Could not upload recording.');
      return null;
    }
  };

  // Function to insert the recording download URL into Firebase call room
  const insertRecordingToCallRoom = async (downloadURL: string) => {
    try {
      const callsRef = ref(db, `calls`);
      const snapshot = await get(callsRef);

      if (snapshot.exists()) {
        const callsData = snapshot.val();
        const userCalls = Object.entries(callsData).filter(([callId, callData]: any) => {
          return callData.caller?.id === auth.currentUser?.uid;
        });

        if (userCalls.length > 0) {
          const [callId, callData] = userCalls[0];
          const updatedCallData = {
            ...callData,
            caller: { ...callData.caller, recordingUri: downloadURL }, // Update receiver's recordingUri
            status: 'completed',
            timestamp: new Date().toISOString(),
          };

          const callRef = ref(db, `calls/${callId}`);
          await update(callRef, updatedCallData);
          Alert.alert('Call data updated', "Recording has been added to the receiver's record.");
        }
      } else {
        Alert.alert('Error', 'No calls found in the database.');
      }
    } catch (error) {
      console.error('Error inserting recording into call room:', error);
      Alert.alert('Error', 'Could not update call data. Please try again.');
    }
  };

  useEffect(() => {
    return () => {
      if (sound) {
        sound.unloadAsync();
      }
    };
  }, [sound]);

  const endCall = async () => {
    try {
      await stopRecording();

      if (intervalId) {
        clearInterval(intervalId);
        setIntervalId(null);
      }

      if (callRoomId) {
        const callRef = ref(db, `calls/${callRoomId}`);
        await remove(callRef);
        setCallRoomId('');
        setCallDetails(null);
        Alert.alert('Call Ended', 'The call has been ended successfully.');
      } else {
        Alert.alert('Error', 'No active call to end.');
      }

      router.back();
    } catch (error) {
      console.error('Error ending the call:', error);
      Alert.alert('Error', 'Could not end the call. Please try again.');
    }
  };

  return (
    <View style={styles.container}>
      <View style={styles.contactContainer}>
        <Image source={require('@/assets/images/profile-logo.png')} style={styles.contactImage} />
        <Text style={styles.title}>{receiverName || 'Calling'} </Text>
        <View style={styles.sectionContainer}>
          <TouchableOpacity
            style={[styles.upperButton, { backgroundColor: '#2CFF62' }]}
            disabled={!callDetails?.caller?.recordingUri || isPlaying}
          >
            <Ionicons name="play" size={50} color="white" />
            <Text style={styles.callButtonText}>{isPlaying ? 'Playing...' : "Play Caller's Recording"}</Text>
          </TouchableOpacity>
        </View>
      </View>
      <View style={styles.buttonContainer}>
        <TouchableOpacity style={styles.callButton} onPress={startRecording} disabled={isRecording}>
          <Ionicons name="mic" size={50} color="white" />
          <Text style={styles.callButtonText}>{isRecording ? 'Recording...' : 'Start Recording'}</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.callButton, { backgroundColor: '#FF6347' }]}
          onPress={stopRecording}
          disabled={!isRecording}
        >
          <FontAwesome name="send" size={50} color="white" />
          <Text style={styles.callButtonText}>Send</Text>
        </TouchableOpacity>

        <TouchableOpacity style={[styles.callButton, { backgroundColor: '#FF4500' }]} onPress={endCall}>
          <Ionicons name="call" size={50} color="white" />
          <Text style={styles.callButtonText}>End Call</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f5f5f5',
  },
  contactImage: {
    resizeMode: 'contain',
    height: hp(20),
    width: wp(30),
  },
  contactContainer: {
    height: hp(50),
    justifyContent: 'center',
    alignItems: 'center',
  },
  buttonContainer: {
    height: hp(50),
    flexDirection: 'row',
    width: wp(100),
    justifyContent: 'center',
    alignItems: 'center',
    gap: wp(10),
  },
  title: {
    fontSize: 30,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  callButton: {
    backgroundColor: '#2CFF62',
    height: hp(15),
    width: wp(25),
    padding: 15,
    borderRadius: 50,
    justifyContent: 'center',
    alignItems: 'center',
  },
  callButtonText: {
    color: 'white',
    fontSize: 18,
    textAlign: 'center',
    flexWrap: 'wrap',
  },
  sectionContainer: {
    marginTop: 20,
    width: wp(80),
    alignItems: 'center',
    justifyContent: 'center',
  },
  upperButton: {
    alignItems: 'center',
    justifyContent: 'center',
    padding: 15,
    width: wp(70),
    borderRadius: 30,
    textAlign: 'center',
  },
});

export default TestRecordingScreen;
